name: Dev Deployment Pipeline

on:
  push:
    branches:
      - main # main 브랜치에 push될 때 실행

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub Actions에서 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. application.yml 파일 생성
      - name: Generate application.yml
        run: |
          if [[ -z "${{ secrets.APPLICATION_YML }}" ]]; then
            echo "ERROR: APPLICATION_YML is not set" >&2
            exit 1
          fi
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
        shell: bash

      # 4. application.yml 파일 검증
      - name: Validate application.yml
        run: |
          echo "Validating application.yml..."
          head -n 10 src/main/resources/application.yml

      # 5. Gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 6. Gradle로 빌드 (테스트 제외)
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build -x test

      # 7. 빌드 성공 여부 확인
      - name: Confirm Build Success
        run: |
          if [[ ! -f build/libs/*.jar ]]; then
            echo "ERROR: Build artifact not found" >&2
            exit 1
          else
            echo "Build artifact successfully created"
          fi

      # 8. 빌드 아티팩트 업로드
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: umc7thServer
          path: build/libs/*.jar

  deploy:
    needs: build
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      # 1. 빌드 아티팩트 다운로드
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: umc7thServer
          path: build/libs/

      # 2. Private Key 생성
      - name: Create Private Key
        run: |
          if [[ -z "${{ secrets.EC2_SSH_KEY }}" ]]; then
            echo "ERROR: EC2_SSH_KEY is not set" >&2
            exit 1
          fi
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # 3. Private Key 검증
      - name: Validate Private Key
        run: |
          if [[ ! -f private_key.pem ]]; then
            echo "ERROR: private_key.pem file not found" >&2
            exit 1
          fi
          echo "Private key validated successfully"

      # 4. EC2로 배포
      - name: Deploy to EC2
        env:
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          if [[ -z "$EC2_USERNAME" || -z "$EC2_HOST" ]]; then
            echo "ERROR: EC2_USERNAME or EC2_HOST is not set" >&2
            exit 1
          fi

          # JAR 파일 업로드
          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
          if [[ -z "$jar_file" ]]; then
            echo "ERROR: JAR file not found" >&2
            exit 1
          fi
          echo "Uploading JAR file to EC2..."
          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/umc7thServer.jar || {
            echo "ERROR: Failed to upload JAR file to EC2" >&2
            exit 1
          }

          # application.yml 업로드
          echo "Uploading application.yml to EC2..."
          scp -i private_key.pem -o StrictHostKeyChecking=no src/main/resources/application.yml $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/application.yml || {
            echo "ERROR: Failed to upload application.yml to EC2" >&2
            exit 1
          }

          # EC2에서 애플리케이션 실행
          echo "Starting application on EC2..."
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            if pgrep -f umc7thServer.jar > /dev/null; then
              echo 'Stopping running application...'
              pgrep -f umc7thServer.jar | xargs -r kill -15
              sleep 10
            fi
            nohup java -jar /home/$EC2_USERNAME/umc7thServer.jar \
              --spring.config.location=/home/$EC2_USERNAME/application.yml > /home/$EC2_USERNAME/app-$(date +%Y%m%d%H%M%S).log 2>&1 &
          " || {
            echo "ERROR: Failed to start application on EC2" >&2
            exit 1
          }

      # 5. 애플리케이션 실행 검증
      - name: Validate Application Start
        run: |
          echo "Validating application status on EC2..."
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            if pgrep -f umc7thServer.jar > /dev/null; then
              echo 'Application is running successfully';
            else
              echo 'Application failed to start';
              exit 1;
            fi
          "

      # 6. 민감 정보 파일 정리
      - name: Clean Up
        run: |
          echo "Cleaning up sensitive files..."
          rm -f private_key.pem
          echo "Cleanup completed successfully"
